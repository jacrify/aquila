[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT


#SAVE_VARIABLE VARIABLE=last_file VALUE="{printer.virtual_sdcard.file_path}"
#SAVE_VARIABLE VARIABLE=last_file VALUE={ filename[-1] }
[gcode_macro PRINT_START]
description: Call from slicer
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set preprint_bedlevel=svv.preprint_bedlevel %}

  {% set filepath=printer.virtual_sdcard.file_path %}
  {% set filename=filepath.split('/')%}
  SAVE_VARIABLE VARIABLE=last_file VALUE='"{ filename[-1] }"'
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

  G90 ; use absolute coordinates
  M83 ; extruder relative mode
  M140 S60 ; set  bed temp
  M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
  M190 S60 ; set  bed temp and wait before homing
  G28 ; home all axis
  
  {% if preprint_bedlevel %}
    BED_MESH_CALIBRATE
  {% endif %}
  G1 Z20 F240
  G1 X2 Y60 F3000
  M109 S200 ; wait for nozzle temp to stabilize
  
  #################################################################################
  #Change babysteps here
  #SET_GCODE_OFFSET Z=-0.070
  #################################################################################
  
  G1 Z0.28 F240
  G92 E0
  G1 Y140 E10 F1500 ; prime the nozzle
  G1 X2.3 F5000
  G92 E0
  G1 Y60 E10 F1200 ; prime the nozzle
  G92 E0
  


[gcode_macro PRINT_END]
description: Call from slicer
gcode:

  {% set svv = printer.save_variables.variables %}
  {% set postprint_cooldown=svv.postprint_cooldown %}
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  PRESENT
  {% if postprint_cooldown %}
    M140 S0 ; turn off heatbed
    M104 S0 ; turn off temperature
    M107 ; turn off fan
  {% endif %}
  M84 X Y E ; disable motors




[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}